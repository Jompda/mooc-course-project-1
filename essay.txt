// TODO: Update links
// Ohjeet: https://cybersecuritybase.mooc.fi/module-3.1

LINK: https://github.com/Jompda/mooc-course-project-1
Using list OWASP Top 10 - 2021.
Installation instructions:
1. Install Python (https://www.python.org/).
2. Install Django (https://docs.djangoproject.com/en/5.1/topics/install/). On Arch install package "python-django".


FLAW 1:
https://github.com/Jompda/mooc-course-project-1/blob/f5d629570876d9004e9693fece4c749c7cf73703/server/pages/templates/pages/confirm.html#L23
Found in every form of the html templates.

Cross Site Request Forgery (CSRF) is a type of attack leveraging browser authentication. The idea is that if a browser holds authentication information to a service, like a cookie or HTTP login information, a malicious actor can then send requests to said service which the browser then automatically authenticates [1]. In the course project, the referenced form is pointing to a API end point which accepts a GET request which can easily be forged by having the following element in a website '<img src="DOMAIN/confirm/?sender=INSERT_SENDER_ID&receiver=INSERT_RECEIVER_ID&amount=INSERT_AMOUNT" />', tricking the browser to sending the malicious request.

To filter out such requests, frameworks have begun providing tokens unique to user and form. Should a request not have the correct token it should be deemed as malicious and discarded [2]. Though this method still allows for a malicious website extract the CSRF token from the form page with a simple XmlHttpRequest effectively bypassing a token-based fix.


FLAW 2:
https://github.com/Jompda/mooc-course-project-1/blob/f5d629570876d9004e9693fece4c749c7cf73703/server/pages/views.py#L8

A03:2021-Injection, in this case SQL injection, happens when unsanitized input from a client is passed to SQL queries, thus allowing SQL statements to be run arbitrarily [3]. The referenced code is flawed because it passes user-supplied content (HTTP query parameters) directly to a vulnerable function (transfer) which doesn't do any kind of sanitizing on the parameters and just inserts them to the SQL query.

This flaw can be avoided by sanitizing all client-submitted content. Also a common way to prevent SQL injection is to use libraries that provide Object-Relational Mapping (ORM) so the SQL queries are generated and sanitized properly from the get-go. Though, ORM injection [4] is also a thing.


FLAW 3:
https://github.com/Jompda/mooc-course-project-1/blob/2fac63e8248bc8396576a2e9b172e2efcc9c59a9/server/pages/views.py#L31

A01:2021-Broken Access Control happens when a user is allowed to act outside their intended privileges [5]. In the referenced code, any authenticated user is able to confirm a transfer from any account to any account. For example, a malicious request would be as follows: "DOMAIN/confirm/?sender=INSERT_SENDER_ID&receiver=INSERT_RECEIVER_ID&amount=INSERT_AMOUNT".

Such a flaw can be easily fixed by checking whether or not the user actually has privileges over the sender account on the server side.


FLAW 4:
https://github.com/Jompda/mooc-course-project-1/blob/3a602cfc02bc6c9acb366b48d25311eebee088de/server/pages/views.py#L61

A07:2021-Identification and Authentication Failures includes vulnerability to brute force attacks [6]. A brute force attack usually consists of testing common values at a rapid speed and it can be taken further by using mutations of said values [7]. Even exhaustive methods can be utilized with todays computing performance.

Such a flaw can be quite easily fixed by setting a hard limit on how many failed login attempts can occur within a certain amount of time, after which the IP address gets blocked for a while, and optionally the owner of the account in question gets notified. Another method is to lock the victim account to prevent further login attempts [7].


FLAW 5:
https://github.com/Jompda/mooc-course-project-1/blob/893901fc55dafeb0f4f7b22158c85e0a923483e3/server/pages/views.py#L16

A09:2021-Security Logging and Monitoring Failures can be simplified to insufficient logging [8]. The course project only logs HTTP requests and they're just printed to STDOUT which doesn't even get stored anywhere. Thus, malicious actions such as money transfers or login attempts can go completely undetected.

All events such as HTTP requests and money transfers should be logged to a persistent medium in a clearly readable format. The log should also be backed up in a separate physical location [8].


References:
[1] https://owasp.org/www-community/attacks/csrf
[2] https://cybersecuritybase.mooc.fi/module-2.3/1-security#programming-exercise-csrf-prompt-by-pass
[3] https://owasp.org/www-community/attacks/SQL_Injection
[4] https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.7-Testing_for_ORM_Injection.html
[5] https://owasp.org/Top10/A01_2021-Broken_Access_Control/
[6] https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/
[7] https://owasp.org/www-community/attacks/Brute_force_attack
[8] https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/
